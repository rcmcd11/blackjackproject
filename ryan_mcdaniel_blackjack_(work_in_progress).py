# -*- coding: utf-8 -*-
"""Ryan McDaniel BlackJack (Work in Progress).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JAhC66rEe_bOZOwo9DxKR2j7TZqjJ1ij
"""

import numpy as np
import matplotlib.pyplot as plt
from IPython.core.display import display, HTML, Image
from google.colab import files
import PIL
from PIL import Image as IMG

card_back = "https://i.ibb.co/KKPB6Bh/cardback.png"
card_url_head = "https://www.improvemagic.com/wp-content/uploads/2020/11/"
card_url_tail = ".png"
suit = ['k','p','s','l'] #clubs,spades,hearts,diamonds
rank = ['a','2','3','4','5','6','7','8','9','10','j','q','k']
rank_values = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'j': 10, 'q': 10, 'k': 10, 'a': 11}

def show_img(img):
  display(HTML('<img src=' + img + '>'))

def card_image(card_value):
  i = card_value//13
  j = card_value%13
  return suit[i]+rank[j]

def show_hand(hand=[0,1],hidden=0):
  srcs = []

  if hidden > 0:
    occluded_hand = hand[:-hidden] + ['hidden'] * hidden
  else:
    occluded_hand = hand


  for i in occluded_hand:
    if i == 'hidden':
      srcs.append(card_back);
    else:
      srcs.append(f'{card_url_head + card_image(i) + card_url_tail}')
  images_html = ''.join([f'<img src="{srcs[i]}" style="display:inline-block; margin:5px;" />' for i in range(len(occluded_hand))])
  display(HTML(images_html))

def new_deck(num_decks=1,shuffled=True):
  deck = list(range(52 * num_decks))
  for i in range(len(deck)):
    if deck[i] > 51:
      while deck[i] > 51:
        deck[i] -= 52
  if shuffled == True:
    np.random.shuffle(deck)
  return deck

def draw_cards(deck, draw_ref, num=2):
    drawn_cards = deck[draw_ref:draw_ref + num]
    return drawn_cards, draw_ref + num

def play_hand(num_players=1, card_count=2):
  hands = []
  deck = new_deck(1,True)
  ref = 0
  for i in range(num_players):
    hand, ref = draw_cards(deck, ref, card_count)
    hands.append(hand)
  return hands

def card_blackjack_value(card_value):
  j = card_value%13
  return rank_values[rank[j]]

def hand_blackjack_value(hand, aces_are_ones=False):
  total_value = 0
  num_aces = 0
  for i in hand:
    total_value += card_blackjack_value(i)
    if aces_are_ones == False:
      if card_blackjack_value(i) == 11:
        num_aces += 1
      if total_value > 21 and num_aces > 0:
        total_value -= 10
        num_aces -= 1
    else:
      if card_blackjack_value(i) == 11:
        num_aces += 1
      if num_aces > 0:
        total_value -= 10
        num_aces -= 1
  return total_value

def check_soft_aces(hand):
  if hand_blackjack_value(hand, True) + 10 <= 21:
    soft_ace = True
  else:
    soft_ace = False
  return soft_ace

data = []
for i in range(10000):
  hands = play_hand()
  for i in hands:
    data.append(hand_blackjack_value(i))

plt.hist(data, bins=range(min(data),min(data)+max(data)+1), color='green', alpha=0.5)
plt.xticks(range(min(data) - 1, max(data) + 2))
plt.xlim(min(data)-1,max(data)+2)
plt.show()

def play_blackjack_hand(num_players=1):
  dealer_blackjack = False
  dealer_bust = False
  hands = []
  hands_blackjack = []
  hands_results = []
  deck = new_deck()
  ref = 0



  #deal the dealer's cards


  #force dealer blackjack
  #dealer_hand = [0,10]

  #force dealer hard 17
  #dealer_hand = [6,10]

  #force dealer hard 16
  #dealer_hand = [5,10]

  #force dealer soft 17
  #dealer_hand = [0,5]

  #random dealer hand
  dealer_hand, ref = draw_cards(deck, ref, 2)
  if hand_blackjack_value(dealer_hand) == 21:
    dealer_blackjack = True




  #show the first card of the dealer hand

  print('Dealer Hand\n')
  show_hand(dealer_hand, 1)
  print('\n\n\n\n')


  #deal the players' hands

  for i in range(num_players):
    hand, ref = draw_cards(deck, ref, 2)
    hands.append(hand)
    if hand_blackjack_value(hand) == 21:
      hands_blackjack.append(True)
    else:
      hands_blackjack.append(False)

  #check for dealer and player blackjacks

  for i in range(num_players):

    if dealer_blackjack and not hands_blackjack[i]:

      hands_results.append('JLoss')

      print(f'Dealer has Blackjack. Player {i+1} loses.\n')
      show_hand(hands[i])
      print('\n\n\n\n')

    elif dealer_blackjack and hands_blackjack[i]:

      hands_results.append('JPush')

      print(f'Dealer has Blackjack. Player {i+1} has Blackjack. Push.\n')
      show_hand(hands[i])
      print('\n\n\n\n')

    elif not dealer_blackjack and hands_blackjack[i]:

      hands_results.append('JWin')

      print(f'Blackjack! Player {i+1} wins!\n')
      show_hand(hands[i])
      print('\n\n\n\n')

    else:

      hands_results.append(0)



  #let the players choose to hit or stand, display hands, totals, and busts

  for i in range(num_players):

    if(hands_results[i] == 0):
      print('Player ' + str(i+1) + '\n')

    while hands_results[i] == 0:

      show_hand(hands[i])

      if hand_blackjack_value(hands[i]) <= 21:

        print('Current hand total: ' + str(hand_blackjack_value(hands[i])))
        print('\nHit or Stand?')
        hit = input()

        if hit == 'hit':

          added, ref = draw_cards(deck, ref, 1)
          hands[i].append(added[0])
          print('\r\nHit\n')

          if hand_blackjack_value(hands[i]) > 21:

            show_hand(hands[i])
            print('Final hand total: ' + str(hand_blackjack_value(hands[i])) + '\nBust\n\n\n\n')
            hands_results[i] = 'BLoss'

            break

        else:

          print('\r\nStand\n')
          print('Final hand total: ' + str(hand_blackjack_value(hands[i])) + '\n\n\n\n')
          hands_results[i] = 1

      else:

        hands_results[i] = 1


  #reveal dealer hand and force the dealer to hit on any 16s or soft 17s

  print('Dealer Hand\n\n')
  show_hand(dealer_hand)
  print(f'Current Dealer Hand Value: {hand_blackjack_value(dealer_hand)}\n\n\n\n')

  while hand_blackjack_value(dealer_hand) <= 17:

    if hand_blackjack_value(dealer_hand) == 17:

      if check_soft_aces(dealer_hand):

        dealer_added, ref = draw_cards(deck, ref, 1)
        dealer_hand.append(dealer_added[0])
        show_hand(dealer_hand)
        print(f'Current Dealer Hand Value: {hand_blackjack_value(dealer_hand)}\n\n\n\n')

      else:

        break

    else:

      dealer_added, ref = draw_cards(deck, ref, 1)
      dealer_hand.append(dealer_added[0])
      show_hand(dealer_hand)
      print(f'Current Dealer Hand Value: {hand_blackjack_value(dealer_hand)}\n\n\n\n')

    show_hand(dealer_hand)
    print(f'Final Dealer Hand Value:{hand_blackjack_value(dealer_hand)}\n\n\n\n')



  #save the dealer's final value and if he busted or not

  dealer_final = hand_blackjack_value(dealer_hand)

  if dealer_final > 21:
    dealer_bust = True



  #measure the dealer value against players that haven't busted or blackjacked

  for i in range(num_players):

    while hands_results[i] == 1:

      if not dealer_bust:

        if hand_blackjack_value(hands[i]) > dealer_final:

          print(f'Player {i+1} beats the dealer\'s {dealer_final} with their {hand_blackjack_value(hands[i])}.\n\n\n\n')
          hands_results[i] = 'Win'

        elif hand_blackjack_value(hands[i]) == dealer_final:

          print(f'\n\nPlayer {i+1} ties the dealer\'s {dealer_final} with their {hand_blackjack_value(hands[i])}.\n\n\n\n')
          hands_results[i] = 'Push'

        else:

          print(f'\n\nPlayer {i+1} loses to the dealer\'s {dealer_final} with their {hand_blackjack_value(hands[i])}.\n\n\n\n')
          hands_results[i] = 'Loss'

      else:

        print(f'\n\nThe Dealer Busted.  Player {i+1} wins with a {hand_blackjack_value(hands[i])}.\n\n\n\n')
        hands_results[i] = 'BWin'



  return hands_results

play_blackjack_hand(3)

"""1. JWin, JLoss, and JPush each signify a win, loaa, or puah by BlackJack.

2. BWin and BLoss signify winning by dealer bust or losing by player bust.

3. Win, Loss, and Push signify winning, losing, or pushing when neither the player or dealer bust or have BlackJack.
"""

def play_blackjack_hand_auto(num_hands=1,num_players=1):
  dealer_shown = []
  dealer_results = []
  hands = []
  hands_blackjack = []
  hands_results = []

  for i in range(num_hands):
    ref = 0
    deck = new_deck(6)
    dealer_hand, ref = draw_cards(deck, ref)
    shown_card = card_blackjack_value(dealer_hand[0])
    dealer_shown.append(shown_card)
    if hand_blackjack_value(dealer_hand) == 21:
      dealer_results.append(100) #100 represents blackjack.  We will use this to count the total blackjacks at the end.
    else:
      while hand_blackjack_value(dealer_hand) <= 17:
        if hand_blackjack_value(dealer_hand) == 17:
          if check_soft_aces(dealer_hand):
            dealer_added, ref = draw_cards(deck, ref, 1)
            dealer_hand.append(dealer_added[0])
          else:
            break
        else:
          dealer_added, ref = draw_cards(deck, ref, 1)
          dealer_hand.append(dealer_added[0])
      if hand_blackjack_value(dealer_hand) > 21:
        dealer_results.append(22)
      else:
        dealer_results.append(hand_blackjack_value(dealer_hand))
  results_2 = [dealer_results[i] for i, value in enumerate(dealer_shown) if value == 2]
  results_3 = [dealer_results[i] for i, value in enumerate(dealer_shown) if value == 3]
  results_4 = [dealer_results[i] for i, value in enumerate(dealer_shown) if value == 4]
  results_5 = [dealer_results[i] for i, value in enumerate(dealer_shown) if value == 5]
  results_6 = [dealer_results[i] for i, value in enumerate(dealer_shown) if value == 6]
  results_7 = [dealer_results[i] for i, value in enumerate(dealer_shown) if value == 7]
  results_8 = [dealer_results[i] for i, value in enumerate(dealer_shown) if value == 8]
  results_9 = [dealer_results[i] for i, value in enumerate(dealer_shown) if value == 9]
  results_10 = [dealer_results[i] for i, value in enumerate(dealer_shown) if value == 10]
  results_11 = [dealer_results[i] for i, value in enumerate(dealer_shown) if value == 11]

  print(f'  When the shown card was a 2, the dealer busted {round(100*results_2.count(22)/len(results_2), 4)}% of the time.\n\
  He ended with a 17 - {round(100*results_2.count(17)/len(results_2), 4)}% of the time.\n\
  He ended with an 18 - {round(100*results_2.count(18)/len(results_2), 4)}% of the time.\n\
  He ended with a 19 - {round(100*results_2.count(19)/len(results_2), 4)}% of the time.\n\
  He ended with a 20 - {round(100*results_2.count(20)/len(results_2), 4)}% of the time.\n\
  He ended with a 21 - {round(100*results_2.count(21)/len(results_2), 4)}% of the time.\n')

  print(f'  When the shown card was a 3, the dealer busted {round(100*results_3.count(22)/len(results_3), 4)}% of the time.\n\
  He ended with a 17 - {round(100*results_3.count(17)/len(results_3), 4)}% of the time.\n\
  He ended with an 18 - {round(100*results_3.count(18)/len(results_3), 4)}% of the time.\n\
  He ended with a 19 - {round(100*results_3.count(19)/len(results_3), 4)}% of the time.\n\
  He ended with a 20 - {round(100*results_3.count(20)/len(results_3), 4)}% of the time.\n\
  He ended with a 21 - {round(100*results_3.count(21)/len(results_3), 4)}% of the time.\n')

  print(f'  When the shown card was a 4, the dealer busted {round(100*results_4.count(22)/len(results_4), 4)}% of the time.\n\
  He ended with a 17 - {round(100*results_4.count(17)/len(results_4), 4)}% of the time.\n\
  He ended with an 18 - {round(100*results_4.count(18)/len(results_4), 4)}% of the time.\n\
  He ended with a 19 - {round(100*results_4.count(19)/len(results_4), 4)}% of the time.\n\
  He ended with a 20 - {round(100*results_4.count(20)/len(results_4), 4)}% of the time.\n\
  He ended with a 21 - {round(100*results_4.count(21)/len(results_4), 4)}% of the time.\n')

  print(f'  When the shown card was a 5, the dealer busted {round(100*results_5.count(22)/len(results_5), 4)}% of the time.\n\
  He ended with a 17 - {round(100*results_5.count(17)/len(results_5), 4)}% of the time.\n\
  He ended with an 18 - {round(100*results_5.count(18)/len(results_5), 4)}% of the time.\n\
  He ended with a 19 - {round(100*results_5.count(19)/len(results_5), 4)}% of the time.\n\
  He ended with a 20 - {round(100*results_5.count(20)/len(results_5), 4)}% of the time.\n\
  He ended with a 21 - {round(100*results_5.count(21)/len(results_5), 4)}% of the time.\n')

  print(f'  When the shown card was a 6, the dealer busted {round(100*results_6.count(22)/len(results_6), 4)}% of the time.\n\
  He ended with a 17 - {round(100*results_6.count(17)/len(results_6), 4)}% of the time.\n\
  He ended with an 18 - {round(100*results_6.count(18)/len(results_6), 4)}% of the time.\n\
  He ended with a 19 - {round(100*results_6.count(19)/len(results_6), 4)}% of the time.\n\
  He ended with a 20 - {round(100*results_6.count(20)/len(results_6), 4)}% of the time.\n\
  He ended with a 21 - {round(100*results_6.count(21)/len(results_6), 4)}% of the time.\n')

  print(f'  When the shown card was a 7, the dealer busted {round(100*results_7.count(22)/len(results_7), 4)}% of the time.\n\
  He ended with a 17 - {round(100*results_7.count(17)/len(results_7), 4)}% of the time.\n\
  He ended with an 18 - {round(100*results_7.count(18)/len(results_7), 4)}% of the time.\n\
  He ended with a 19 - {round(100*results_7.count(19)/len(results_7), 4)}% of the time.\n\
  He ended with a 20 - {round(100*results_7.count(20)/len(results_7), 4)}% of the time.\n\
  He ended with a 21 - {round(100*results_7.count(21)/len(results_7), 4)}% of the time.\n')

  print(f'  When the shown card was an 8, the dealer busted {round(100*results_8.count(22)/len(results_8), 4)}% of the time.\n\
  He ended with a 17 - {round(100*results_8.count(17)/len(results_8), 4)}% of the time.\n\
  He ended with an 18 - {round(100*results_8.count(18)/len(results_8), 4)}% of the time.\n\
  He ended with a 19 - {round(100*results_8.count(19)/len(results_8), 4)}% of the time.\n\
  He ended with a 20 - {round(100*results_8.count(20)/len(results_8), 4)}% of the time.\n\
  He ended with a 21 - {round(100*results_8.count(21)/len(results_8), 4)}% of the time.\n')

  print(f'  When the shown card was a 9, the dealer busted {round(100*results_9.count(22)/len(results_9), 4)}% of the time.\n\
  He ended with a 17 - {round(100*results_9.count(17)/len(results_9), 4)}% of the time.\n\
  He ended with an 18 - {round(100*results_9.count(18)/len(results_9), 4)}% of the time.\n\
  He ended with a 19 - {round(100*results_9.count(19)/len(results_9), 4)}% of the time.\n\
  He ended with a 20 - {round(100*results_9.count(20)/len(results_9), 4)}% of the time.\n\
  He ended with a 21 - {round(100*results_9.count(21)/len(results_9), 4)}% of the time.\n')

  print(f'  When the shown card was a 10 or a Face Card, the dealer busted {round(100*results_10.count(22)/len(results_10), 4)}% of the time.\n\
  He had a Blackjack - {round(100*results_10.count(100)/len(results_10), 4)}% of the time.\n\
  He ended with a 17 - {round(100*results_10.count(17)/len(results_10), 4)}% of the time.\n\
  He ended with an 18 - {round(100*results_10.count(18)/len(results_10), 4)}% of the time.\n\
  He ended with a 19 - {round(100*results_10.count(19)/len(results_10), 4)}% of the time.\n\
  He ended with a 20 - {round(100*results_10.count(20)/len(results_10), 4)}% of the time.\n\
  He ended with a non-Blackjack 21 - {round(100*results_9.count(21)/len(results_9), 4)}% of the time.\n')

  print(f'  When the shown card was an Ace, the dealer busted {round(100*results_11.count(22)/len(results_11), 4)}% of the time.\n\
  He had a Blackjack - {round(100*results_11.count(100)/len(results_11), 4)}% of the time.\n\
  He ended with a 17 - {round(100*results_11.count(17)/len(results_11), 4)}% of the time.\n\
  He ended with an 18 - {round(100*results_11.count(18)/len(results_11), 4)}% of the time.\n\
  He ended with a 19 - {round(100*results_11.count(19)/len(results_11), 4)}% of the time.\n\
  He ended with a 20 - {round(100*results_11.count(20)/len(results_11), 4)}% of the time.\n\
  He ended with a non-Blackjack 21 - {round(100*results_9.count(21)/len(results_9), 4)}% of the time.\n')

  #print(results_2, results_3, results_4, results_5, results_6, results_7, results_8, results_9, results_10, results_11, sep='\n')

play_blackjack_hand_auto(10000)

